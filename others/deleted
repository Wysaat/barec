void *parse_external_declaration(FILE *stream, namespace_t *namespace)
{
    list *specifiers = parse_specifier(stream, namespace);
    void *storage = specifiers->next->content;
    void *specifier = specifiers->next->next->content;
    if (!storage)
        storage = static_storage_init(0, 0);
    char *token = scan(stream);
    if (!strcmp(token, ";"))
        return 0;
    unscan(token, stream);
    list *stmt_list = list_node();
    while (1) {
        declarator *dptr = parse_declarator(stream, 0, namespace);
        list *type_list = dptr->type_list;
        list *ptr = type_list;
        while (ptr->next)
            ptr = ptr->next;
        if (specifier && type(specifier) == list_t) {
            if (!ptr->prev) {
                free(type_list);
                type_list = specifier;
            }
            else {
                list *last = ptr->prev;
                free(ptr);
                last->next = specifier;
                last->next->prev = last;
            }
        }
        else
            ptr->content = specifier;
        char *id = dptr->id;

        declaration *node = 0;
        func *func_ = 0;

        if (type(storage) != typedef_storage_t && !find_identifier(namespace, id)) {
            if (type(type_list->content) == function_t) {
                func_ = func_init(id, 0, type_list);
                list_append(func_list, func_);
            }
            else {
                node = declaration_init(id, 0, type_list);
                list_append(namespace->declaration_list, node);
            }
        }
        else
            list_append(namespace->typedefs, typedef_init(id, type_list));

        token = scan(stream);

        if (!strcmp(token, "{")) {
            function *f = type_list->content;
            list *ptr;
            int psize = 0;
            for (ptr = f->parameter_list->next; ptr; ptr = ptr->next) {
                declaration *d = ptr->content;
                parameter_storage *storage = parameter_storage_init();
                storage->address = psize;
                struct size *thesize = size(d->type_list);
                psize += thesize->ival;
                d->storage = storage;
            }
            unscan(token ,stream);
            func_->tag = !strcmp(id, "main") ? strdup("_start") : get_tag();
            list *parameter_list = ((function *)type_list->content)->parameter_list;
            list *return_type_list = list_copy(type_list->next);
            return_tag = get_tag();
            compound_stmt *body = parse_compound_stmt(stream, namespace, list_copy(parameter_list));
            function_definition_t *retptr = function_definition_init(id, return_type_list, parameter_list, body, return_tag, func_->tag);
            return retptr;
        }

        void *initializer = 0;
        int got_eq = 0;
        if (!strcmp(token, "=")) {
            void *initializer = parse_initializer(stream, namespace);
            got_eq = 1;
            token = scan(stream);
        }

        if (type(storage) == static_storage_t) {
            if (got_eq) {
                if (initialized) {
                    node->storage = static_storage_init(data_size, 1);
                    data_size += size(type_list)->ival;
                }
                else {
                    node->storage = static_storage_init(bss_size, 0);
                    bss_size += size(type_list)->ival;
                }
                if (type(type_list->content) == struct_specifier_t)
                    struct_def(node);
            }
            else if (type(type_list->content) != function_t)
                node->storage = static_storage_init(-1, -1);
        }

        void *stmt = 0;
        int initialized = initializer ? 1 : 0;
        stmt = initializing(node, initializer);
        if (stmt) {
            if (type(storage) == static_storage_t) {
                compound_stmt *body;
                if (type(stmt) == compound_stmt_t)
                    body = stmt;
                else {
                    list *stmts = list_node();
                    list_append(stmts, stmt);
                    body = COMPOUND_STMT(stmts, 0);
                }
                list_append(stmt_list, static_initialization_init(body, initialized));
            }
        }
        if (!strcmp(token, ";"))
            return COMPOUND_STMT(stmt_list, 0);
    }
}

void parse_primary_expression(FILE *stream, scope *local_scope) {
    char *token = scan(stream);
    // convention: put the address on ebx, for assignments
    if (is_identifier(token)) {
        char *next_token = scan(stream);
        unscan(next_token, stream);
        if (local_scope->decl_type && (!strcmp(next_token, "=") || !strcmp(next_token, ",") || !strcmp(next_token, ";")))
            declare(local_scope, token);
        emit("lea    ebx, ");
        emit("[ebp-");
        emit(itoa(find_addr(local_scope, token)));
        emit("]\n");
        emit("mov    eax, [ebx]\n");
    }
    else if (is_integer_const(token)) {
        emit("mov    eax, ");
        emit(token);
        emit("\n");
    }
    else if (is_character_const(token)) {
        emit("mov    eax, ");
        emit(token);
        emit("\n");
    }
}

void parse_postfix_expression(FILE *stream, scope *local_scope) {
    parse_primary_expression(stream, local_scope);
}

void parse_unary_expression(FILE *stream, scope *local_scope) {
    parse_postfix_expression(stream, local_scope);
}

void parse_cast_expression(FILE *stream, scope *local_scope) {
    parse_unary_expression(stream, local_scope);
}

void parse_multiplicative_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_cast_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            if (!strcmp(token, "*"))
                emit("mul    ebx\n");
            else if (!strcmp(token, "/"))
                emit("div    ebx\n");
            else if (!strcmp(token, "%")) {
                emit("div    ebx\n");
                emit("mov    eax, edx\n");
            }
        }
        token = scan(stream);
        if (!strcmp(token, "*") || !strcmp(token, "/") || !strcmp(token, "%")) {
            emit("push   eax\n");
        }
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_additive_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_multiplicative_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            if (!strcmp(token, "+"))
                emit("add    eax, ebx\n");
            else
                emit("sub    eax, ebx\n");
        }
        token = scan(stream);
        if (!strcmp(token, "+") || !strcmp(token, "-")) {
            emit("push   eax\n");
        }
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_shift_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_additive_expression(stream, local_scope);
        if (token) {
            emit("pop    ecx\n");
            emit("xchg   eax, ecx\n");
            if (!strcmp(token, "<<"))
                emit("shl    eax, cl\n");
            else
                emit("shr    eax, cl\n");
        }
        token = scan(stream);
        if (!strcmp(token, "<<") || !strcmp(token, ">>"))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_relational_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_shift_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("cmp    eax, ebx\n");
            if (!strcmp(token, ">"))
                emit("jng    tag");
            else if (!strcmp(token, "<"))
                emit("jnl    tag");
            else if (!strcmp(token, ">="))
                emit("jl     tag");
            else
                emit("jg     tag");
            int tag1 = tag++;
            emit(itoa(tag1));
            emit("\nmov    eax, 1\n");
            emit("jmp    tag");
            int tag2 = tag++;
            emit(itoa(tag2));
            emit("\ntag");
            emit(itoa(tag1));
            emit(":\nmov    eax, 0\ntag");
            emit(itoa(tag2));
            emit(":\n");
        }
        token = scan(stream);
        if (!strcmp(token, "<") || !strcmp(token, ">") || !strcmp(token, "<=") || !strcmp(token, ">="))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_equality_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_relational_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("cmp    eax, ebx\n");
            if (!strcmp(token, "=="))
                emit("jne    tag");
            else
                emit("je     tag");
            int tag1 = tag++;
            emit(itoa(tag1));
            emit("\nmov    eax, 1\n");
            emit("jmp    tag");
            int tag2 = tag++;
            emit(itoa(tag2));
            emit("\ntag");
            emit(itoa(tag1));
            emit(":\nmov    eax, 0\ntag");
            emit(itoa(tag2));
            emit(":\n");
        }
        token = scan(stream);
        if (!strcmp(token, "==") || !strcmp(token, "!="))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_and_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_equality_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("and    eax, ebx\n");
        }
        token = scan(stream);
        if (!strcmp(token, "&"))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_exclusive_or_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_and_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("xor    eax, ebx\n");
        }
        token = scan(stream);
        if (!strcmp(token, "^"))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_inclusive_or_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_exclusive_or_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("or    eax, ebx\n");
        }
        token = scan(stream);
        if (!strcmp(token, "|"))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_logical_and_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_inclusive_or_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("cmp    eax, 0\n");
            emit("je     tag");
            int tag1 = tag++;
            emit(itoa(tag1));
            emit("\ncmp    ebx, 0\n");
            emit("jne    tag");
            int tag2 = tag++;
            emit(itoa(tag2));
            emit("\ntag");
            emit(itoa(tag1));
            emit(":\nmov    eax, 0\n");
            emit("jmp    tag");
            int tag3 = tag++;
            emit(itoa(tag3));
            emit("\ntag");
            emit(itoa(tag2));
            emit(":\nmov    eax, 1\n");
            emit("tag");
            emit(itoa(tag3));
            emit(":\n");
        }
        token = scan(stream);
        if (!strcmp(token, "&&"))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}

void parse_logical_or_expression(FILE *stream, scope *local_scope) {
    char *token = 0;
    while (1) {
        parse_logical_and_expression(stream, local_scope);
        if (token) {
            emit("pop    ebx\n");
            emit("xchg   eax, ebx\n");
            emit("cmp    eax, 0\n");
            emit("jne    tag");
            int tag1 = tag++;
            emit(itoa(tag1));
            emit("\ncmp    ebx, 0\n");
            emit("je     tag");
            int tag2 = tag++;
            emit(itoa(tag2));
            emit("\ntag");
            emit(itoa(tag1));
            emit(":\nmov    eax, 1\n");
            emit("jmp    tag");
            int tag3 = tag++;
            emit(itoa(tag3));
            emit("\ntag");
            emit(itoa(tag2));
            emit(":\nmov    eax, 0\n");
            emit("tag");
            emit(itoa(tag3));
            emit(":\n");
        }
        token = scan(stream);
        if (!strcmp(token, "||"))
            emit("push   eax\n");
        else {
            unscan(token, stream);
            break;
        }
    }
}


void parse_conditional_expression(FILE *stream, scope *local_scope) {
    parse_logical_or_expression(stream, local_scope);
}

void parse_assignment_expression(FILE *stream, scope *local_scope) {
    parse_conditional_expression(stream, local_scope);
    char *token = scan(stream);
    if (!strcmp(token, "=")) {
        emit("push   ebx\n");
        parse_assignment_expression(stream, local_scope);
        emit("pop    ebx\n");
        emit("mov    [ebx], eax\n");
    }
    else
        unscan(token, stream);
}

void parse_expression(FILE *stream, scope *local_scope) {
    char *token;
    while (1) {
        parse_assignment_expression(stream, local_scope);
        token = scan(stream);
        if (!strcmp(token, ";")) {
            unscan(token, stream);
            break;
        }
    }
}

void parse_expression_statement(FILE *stream, scope *local_scope) {
    char *token = scan(stream);
    if (!strcmp(token, ";")) {
        emit("");
        return;
    }
    unscan(token, stream);
    parse_expression(stream, local_scope);
    token = scan(stream);
    if (!strcmp(token, ";"))
        return;
}

void parse_if_statement(FILE *stream, scope *local_scope) {
    char *token = scan(stream);    // it should be "if"
    token = scan(stream);
    if (!strcmp(token, "(")) {
        parse_expression(stream, local_scope);
        int tag1 = tag++;
        emit("cmp    eax, 0\n");
        emit("jz     tag");
        emit(itoa(tag1));
        emit("\n");
        token = scan(stream);
        if (!strcmp(token, ")")) {
            parse_statement(stream, local_scope);
            int tag2 = tag++;
            emit("jmp    tag");
            emit(itoa(tag2));
            emit("\n");
            emit("tag");
            emit(itoa(tag1));
            emit(":\n");
            token = scan(stream);
            if (!strcmp(token, "else")) {
                parse_statement(stream, local_scope);
            }
            else
                unscan(token, stream);
            emit("tag");
            emit(itoa(tag2));
            emit(":\n");
        }
    }
}

void parse_while_statement(FILE *stream, scope *local_scope) {
    char *token = scan(stream);    // it should be "while"
    int tag1 = tag++;
    emit("tag");
    emit(itoa(tag1));
    emit(":\n");
    token = scan(stream);
    if (!strcmp(token, "(")) {
        parse_expression(stream, local_scope);
        if (!strcmp(token, ")")) {
            emit("cmp    eax, 0");
            int tag2 = tag++;
            emit("jz     tag");
            emit(itoa(tag2));
            emit("\n");
            parse_statement(stream, local_scope);
            emit("jmp    tag");
            emit(itoa(tag1));
            emit("\n");
            emit("tag");
            emit(itoa(tag2));
            emit(":\n");
        }
    }
}

// void parse_for_statement(FILE *stream, scope *local_scope) {
//     char *token = scan(stream);    // it should be "for"
//     token = scan(stream);
//     if (!strcmp(token, "(")) {
//         token = scan(stream);
//         if (strcmp(token, ";")) {
//             unscan(token, stream);
//             parse_expression(stream, local_scope);
//             token = scan(stream);
//         }
//         int tag1 = tag++;
//         emit("tag");
//         emit(itoa(tag1));
//         emit(":\n");
//         token = scan(stream);

//         if (strcmp(token, ";")) {
//             unscan(token, stream);
//             parse_expression(stream, local_scope);
//             token = scan(stream);
//         }
//         emit("cmp    eax, 0\n");
//         emit("jz     tag");
//         int tag2 = tag++;
//         emit(itoa(tag2));
//         emit("\n");

//         if ()
//     }
// }

void parse_compound_statement(FILE *stream, scope *local_scope) {
    char *token = scan(stream);
    if (!strcmp(token, "{")) {
        while (1) {
            token = scan(stream);
            if (!strcmp(token, "}"))
                break;
            unscan(token, stream);
            if (!strcmp(token, "int"))
                parse_declaration(stream, local_scope, 1);
            else
                parse_statement(stream, local_scope);
        }
    }
}

void parse_statement(FILE *stream, scope *local_scope) {
    char *token = scan(stream);
    unscan(token, stream);
    if (!strcmp(token, "if"))
        parse_if_statement(stream, local_scope);
    else if (!strcmp(token, "while"))
        parse_while_statement(stream, local_scope);
    // else if (!strcmp(token, "for"))
    //     parse_for_statement(stream, local_scope);
    else if (!strcmp(token, "{"))
        parse_compound_statement(stream, local_scope);
    else
        parse_expression_statement(stream, local_scope);
}

void parse_declaration(FILE *stream, scope *local_scope, int decl) {
    char *token = scan(stream);
    if (decl) {
        if (!strcmp(token, "int"))
            local_scope->decl_type = int_t;
    }
    parse_expression(stream, local_scope);
    token = scan(stream);
    if (!strcmp(token, ";"))
        local_scope->decl_type = 0;
}

void parse_function_definition(FILE *stream, scope *local_scope, int decl) {
    char *token = scan(stream);
    if (!strcmp(token, "int")) {
        token = scan(stream);    // function name
        int tag1 = tag++;
        token = scan(stream);
        if (!strcmp(token, "(")) {
        }
    }
}

int main()
{
    system("touch out && rm out");
    FILE *stream = fopen("test.c", "r");
    scope *local_scope = scope_init();
    local_scope->next_addr += 4;  /* push   ebp */
    char *token;
    while (1) {
        token = scan(stream);
        if (!*token)
            break;
        unscan(token, stream);
        if (!strcmp(token, "int"))
            parse_declaration(stream, local_scope, 1);
        else
            parse_statement(stream, local_scope);
    }
    fclose(stream);

    printf("local_scope->next_addr is %d\n", local_scope->next_addr);

    system("touch out && rm out");

    emit("push   ebp\n");
    emit("mov    ebp, esp\n");
    emit("sub    esp, ");
    emit(itoa(local_scope->next_addr));
    emit("\n");

    stream = fopen("test.c", "r");
    while (1) {
        token = scan(stream);
        if (!*token)
            break;
        unscan(token, stream);
        if (!strcmp(token, "int"))
            parse_declaration(stream, local_scope, 0);
        else
            parse_statement(stream, local_scope);
    }

    return 0;
}

scope *scope_init() {
    scope *retptr = (scope *)malloc(sizeof(scope));
    memset(retptr, 0, sizeof(scope));
    return retptr;
}

val_list *val_list_node(char *name, int addr) {
    val_list *retptr = (val_list *)malloc(sizeof(val_list));
    memset(retptr, 0, sizeof(val_list));
    retptr->name = name;
    retptr->addr = addr;
    return retptr;
}

void val_list_append(val_list *head, char *name, int addr) {
    val_list *ptr = head;
    while (ptr->next)
        ptr = ptr->next;
    ptr->next = val_list_node(name, addr);
    ptr->next->index = ptr->index + 1;
}

int find_addr(scope *local_scope, char *name) {
    val_list *ptr;
    for (ptr = local_scope->vals; ptr; ptr = ptr->next) {
        if (!strcmp(name, ptr->name))
            return ptr->addr;
    }
    puts("f**k");
}

void declare(scope *local_scope, char *token) {
    int addr = local_scope->next_addr;
    int type = local_scope->decl_type;
    if (type == int_t) {
        local_scope->next_addr += 4;
        if (local_scope->vals)
            val_list_append(local_scope->vals, token, addr);
        else
            local_scope->vals = val_list_node(token, addr);
    }
}

typedef struct scope scope;
typedef struct val_list val_list;

struct scope {
    val_list *vals;
    int next_addr;
    int decl_type; /* 0 meaning not in declaration */
};

struct val_list {
    char *name;
    int addr;
    int index;
    val_list *prev;
    val_list *next;
};

scope *scope_init();

val_list *val_list_node(char *name, int addr);
void val_list_append(val_list *head, char *name, int addr);
int find_addr(scope *local_scope, char *name);
void declare(scope *local_scope, char *token);

function_definition_t *parse_function_definition(FILE *stream, namespace_t *namespace)
{
    list *specifiers = parse_specifier(stream, namespace, 4);
    void *storage = specifiers->next->content;
    void *specifier = specifiers->next->next->content;
    declarator *dcl = parse_declarator(stream, 0, namespace);
    char *id = dcl->id;
    char *function_tag = get_tag();
    list *type_list = dcl->type_list;
    list_append(func_list, func_init(id, function_tag, type_list));
    list *ptr = type_list;
    while (ptr->next)
        ptr = ptr->next;
    ptr->content = specifier;
    list *parameter_list = ((function *)type_list->content)->parameter_list;
    list *return_type_list = type_list->next;
    return_type_list->prev = 0;
    return_tag = get_tag();
    compound_stmt *body = parse_compound_stmt(stream, namespace, list_copy(parameter_list));
    function_definition_t *retptr = function_definition_init(id, return_type_list, parameter_list, body, return_tag, function_tag);
    return retptr;
}
